npm i @vue/cli -g //下载cli3.0模板
vue create mobile

1：适配问题 使用px2rem+lib-flexible+postcss-plugin-px2rem进行css及less px转rem
npm install px2rem-loader --save-dev
npm install lib-flexible --save

在main.js中引入lib-flexible 
import 'lib-flexible'

vue.config.js中配置
 module.exports = {
     chainWebpack: (config) => {

         <!--新增的内容-->
         config.module
         .rule('css')
         .test(/\.css$/)
         .oneOf('vue')
         .resourceQuery(/\?vue/)
         .use('px2rem')
         .loader('px2rem-loader')
         .options({
             remUnit: 75
         })
         <!--新增结束-->
     }
 }

安装 "postcss-plugin-px2rem" (devDependencies)
npm install postcss-plugin-px2rem --save-dev
vue.config.js中配置
        module.exports = {
            lintOnSave: true,
            
            <!--新增的内容-->
            css: {
                loaderOptions: {
                    postcss: {
                        plugins: [
                            require('postcss-plugin-px2rem')({
                                rootValue: 75, //换算基数， 默认100  ，这样的话把根标签的字体规定为1rem为50px,这样就可以从设计稿上量出多少个px直接在代码中写多上px了。
                                // unitPrecision: 5, //允许REM单位增长到的十进制数字。
                                //propWhiteList: [],  //默认值是一个空数组，这意味着禁用白名单并启用所有属性。
                                // propBlackList: [], //黑名单
                                exclude: /(node_module)/, //默认false，可以（reg）利用正则表达式排除某些文件夹的方法，例如/(node_module)\/如果想把前端UI框架内的px也转换成rem，请把此属性设为默认值
                                // selectorBlackList: [], //要忽略并保留为px的选择器
                                // ignoreIdentifier: false,  //（boolean/string）忽略单个属性的方法，启用ignoreidentifier后，replace将自动设置为true。
                                // replace: true, // （布尔值）替换包含REM的规则，而不是添加回退。
                                mediaQuery: false, //（布尔值）允许在媒体查询中转换px。
                                minPixelValue: 3 //设置要替换的最小像素值(3px会被转rem)。 默认 0
                            }),
                        ]
                    }
                }
            }
            <!--新增结束-->
        }
最后
package.json 中加入postcss 相关插件
        {
            "dependencies": { .. }
            "postcss": {
                "plugins": {
                    "autoprefixer": {},
                    "precss": {}
                }
            }
        }
重启适配结束


2：使用style-resources-loader配置全局less
vue add style-resources-loader
在vue.config.js中配置
  pluginOptions: {
    'style-resources-loader': {
      preProcessor: 'less',
      patterns: [path.resolve(__dirname, './src/assets/css/common/common.less')]
    }
  }
搞定
3：使用vantui
npm i vant -S
使用babel-plugin-import自动按需引入组件
npm i babel-plugin-import -D

在babel.config.js中配置
  'plugins': [
    ['import', {
      'libraryName': 'vant',
      'libraryDirectory': 'es',
      'style': true
    }]
  ]
在main.js中引入
import 'vant/lib/index.css'
import { Button } from 'vant'
按需引入搞定
底部安全区适配
iPhone X 等机型底部存在底部指示条，指示条的操作区域与页面底部存在重合，容易导致用户误操作，因此我们需要针对这些机型进行底部安全区适配。
Vant 中部分组件提供了safe-area-inset-bottom属性，设置该属性后，即可在对应的机型上开启适配，如下示例：
<van-number-keyboard safe-area-inset-bottom />
4:使用normalize.css作css的样式重置
http://necolas.github.io/normalize.css/


